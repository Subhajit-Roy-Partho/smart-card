{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user profile in the Smart Spend application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user profile."
        },
        "auth0Id": {
          "type": "string",
          "description": "The user's ID from Auth0."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "firstName": {
          "type": "string",
          "description": "User's first name."
        },
        "lastName": {
          "type": "string",
          "description": "User's last name."
        },
        "role": {
          "type": "string",
          "description": "User's role (admin, maintainer, standard, outsider)."
        }
      },
      "required": [
        "id",
        "auth0Id",
        "email",
        "firstName",
        "lastName",
        "role"
      ]
    },
    "CreditCard": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CreditCard",
      "type": "object",
      "description": "Represents a credit card.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the credit card."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N CreditCard)"
        },
        "name": {
          "type": "string",
          "description": "Name of the credit card (e.g., Amex Platinum)."
        },
        "issuer": {
          "type": "string",
          "description": "Issuer of the credit card (e.g., American Express)."
        },
        "annualFee": {
          "type": "number",
          "description": "Annual fee of the credit card."
        }
      },
      "required": [
        "id",
        "userId",
        "name",
        "issuer",
        "annualFee"
      ]
    },
    "Transaction": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Transaction",
      "type": "object",
      "description": "Represents a credit card transaction.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the transaction."
        },
        "creditCardId": {
          "type": "string",
          "description": "Reference to CreditCard. (Relationship: CreditCard 1:N Transaction)"
        },
        "date": {
          "type": "string",
          "description": "Date of the transaction.",
          "format": "date-time"
        },
        "amount": {
          "type": "number",
          "description": "Amount of the transaction."
        },
        "outlet": {
          "type": "string",
          "description": "Name of the outlet where the transaction occurred."
        },
        "categoryId": {
          "type": "string",
          "description": "Reference to Category. (Relationship: Category 1:N Transaction)"
        }
      },
      "required": [
        "id",
        "creditCardId",
        "date",
        "amount",
        "outlet",
        "categoryId"
      ]
    },
    "Category": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Category",
      "type": "object",
      "description": "Represents a category of expenses.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the category."
        },
        "name": {
          "type": "string",
          "description": "Name of the category (e.g., Groceries, Dining)."
        },
        "description": {
          "type": "string",
          "description": "Description of the category."
        }
      },
      "required": [
        "id",
        "name",
        "description"
      ]
    },
    "SpendingGoal": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SpendingGoal",
      "type": "object",
      "description": "Represents a spending goal for a credit card.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the spending goal."
        },
        "creditCardId": {
          "type": "string",
          "description": "Reference to CreditCard. (Relationship: CreditCard 1:N SpendingGoal)"
        },
        "targetAmount": {
          "type": "number",
          "description": "Target spending amount for the goal."
        },
        "deadline": {
          "type": "string",
          "description": "Deadline for achieving the spending goal.",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "Description of the goal."
        }
      },
      "required": [
        "id",
        "creditCardId",
        "targetAmount",
        "deadline",
        "description"
      ]
    },
    "PaymentReminder": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PaymentReminder",
      "type": "object",
      "description": "Represents a payment reminder for a credit card.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the payment reminder."
        },
        "creditCardId": {
          "type": "string",
          "description": "Reference to CreditCard. (Relationship: CreditCard 1:N PaymentReminder)"
        },
        "dueDate": {
          "type": "string",
          "description": "Due date for the payment.",
          "format": "date-time"
        },
        "reminderDate": {
          "type": "string",
          "description": "Date for sending the payment reminder.",
          "format": "date-time"
        },
        "amountDue": {
          "type": "number",
          "description": "Amount due for the payment."
        }
      },
      "required": [
        "id",
        "creditCardId",
        "dueDate",
        "reminderDate",
        "amountDue"
      ]
    },
    "SuggestedCard": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SuggestedCard",
      "type": "object",
      "description": "Represents a credit card suggested by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the suggested card."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N SuggestedCard)"
        },
        "name": {
          "type": "string",
          "description": "Name of the suggested credit card."
        },
        "issuer": {
          "type": "string",
          "description": "Issuer of the suggested credit card."
        },
        "benefits": {
          "type": "string",
          "description": "Benefits of the suggested credit card."
        }
      },
      "required": [
        "id",
        "userId",
        "name",
        "issuer",
        "benefits"
      ]
    },
    "Balance": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Balance",
      "type": "object",
      "description": "Represents a credit card balance.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the balance."
        },
        "creditCardId": {
          "type": "string",
          "description": "Reference to CreditCard. (Relationship: CreditCard 1:N Balance)"
        },
        "balance": {
          "type": "number",
          "description": "Current balance of the credit card."
        },
        "availableCredit": {
          "type": "number",
          "description": "Available credit on the credit card."
        },
        "lastUpdated": {
          "type": "string",
          "description": "Date and time when the balance was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "creditCardId",
        "balance",
        "availableCredit",
        "lastUpdated"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous",
      "google.com"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information. The userId path parameter corresponds to the user's Firebase Auth UID.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, matching their Firebase Auth UID."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/credit_cards/{creditCardId}",
        "definition": {
          "entityName": "CreditCard",
          "schema": {
            "$ref": "#/backend/entities/CreditCard"
          },
          "description": "Stores credit card information for a specific user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, matching their Firebase Auth UID."
            },
            {
              "name": "creditCardId",
              "description": "The unique identifier for the credit card."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/credit_cards/{creditCardId}/transactions/{transactionId}",
        "definition": {
          "entityName": "Transaction",
          "schema": {
            "$ref": "#/backend/entities/Transaction"
          },
          "description": "Stores transaction information for a specific credit card.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, matching their Firebase Auth UID."
            },
            {
              "name": "creditCardId",
              "description": "The unique identifier for the credit card."
            },
            {
              "name": "transactionId",
              "description": "The unique identifier for the transaction."
            }
          ]
        }
      },
      {
        "path": "/categories/{categoryId}",
        "definition": {
          "entityName": "Category",
          "schema": {
            "$ref": "#/backend/entities/Category"
          },
          "description": "Stores expense category information. Accessible by all users.",
          "params": [
            {
              "name": "categoryId",
              "description": "The unique identifier for the category."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/credit_cards/{creditCardId}/spending_goals/{spendingGoalId}",
        "definition": {
          "entityName": "SpendingGoal",
          "schema": {
            "$ref": "#/backend/entities/SpendingGoal"
          },
          "description": "Stores spending goal information for a specific credit card.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, matching their Firebase Auth UID."
            },
            {
              "name": "creditCardId",
              "description": "The unique identifier for the credit card."
            },
            {
              "name": "spendingGoalId",
              "description": "The unique identifier for the spending goal."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/credit_cards/{creditCardId}/payment_reminders/{paymentReminderId}",
        "definition": {
          "entityName": "PaymentReminder",
          "schema": {
            "$ref": "#/backend/entities/PaymentReminder"
          },
          "description": "Stores payment reminder information for a specific credit card.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, matching their Firebase Auth UID."
            },
            {
              "name": "creditCardId",
              "description": "The unique identifier for the credit card."
            },
            {
              "name": "paymentReminderId",
              "description": "The unique identifier for the payment reminder."
            }
          ]
        }
      },
      {
        "path": "/suggested_cards/{suggestedCardId}",
        "definition": {
          "entityName": "SuggestedCard",
          "schema": {
            "$ref": "#/backend/entities/SuggestedCard"
          },
          "description": "Stores credit cards suggested by users. Publicly accessible for viewing with potential moderation.",
          "params": [
            {
              "name": "suggestedCardId",
              "description": "The unique identifier for the suggested card."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/credit_cards/{creditCardId}/balances/{balanceId}",
        "definition": {
          "entityName": "Balance",
          "schema": {
            "$ref": "#/backend/entities/Balance"
          },
          "description": "Stores balance information for a specific credit card.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, matching their Firebase Auth UID."
            },
            {
              "name": "creditCardId",
              "description": "The unique identifier for the credit card."
            },
            {
              "name": "balanceId",
              "description": "The unique identifier for the balance."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to be secure, scalable, and easily debuggable, following the core design principles and strategy mandates. It avoids hierarchical authorization dependencies to ensure atomic operations and easy debugging.\n\n1.  **Authorization Independence:** The structure eliminates the need for `get()` calls in security rules by denormalizing authorization data. For example, any information needed to authorize access to a CreditCard or its subcollections (Transactions, SpendingGoals, PaymentReminders, Balances) is stored directly within those documents, avoiding dependency on the UserProfile. This is achieved through path-based ownership for user-related data and a membership map for collaborative data (if applicable, though not explicitly requested here).\n\n2.  **Clarity of Intent:**  The structure clearly expresses the authorization intent through path-based ownership and dedicated collections. Security rules can be written based on `request.auth.uid` and the document's path, making the rules straightforward and easy to understand.\n\n3.  **DBAC (No Custom Claims):** User roles are stored within the UserProfile document in Firestore. Security rules will rely solely on `request.auth.uid` and the user's role in their profile.\n\n4.  **QAPs (Rules are not Filters):** The structure supports secure `list` operations. Path-based ownership ensures that users can only list documents within their own paths (e.g., `/users/{userId}/credit_cards`). Segregation also plays a role, e.g., SuggestedCard is not associated with the user but rather available for public viewing.\n\n5.  **Invariants:** The structure supports the integrity of ownership. Relationships are clearly defined through `userId` properties.\n\n**Denormalization:** The critical aspect of this design is the denormalization of user-specific authorization data.  For example, while a CreditCard belongs to a User, the User's role is not required within the CreditCard document itself because rules are based on the path `/users/{userId}/credit_cards/{creditCardId}`.\n\n**Structural Segregation:** The structure segregates data based on access patterns. User-specific data is stored under `/users/{userId}`, ensuring only the authenticated user (or an admin) can access it. The `SuggestedCard` collection is separate because the security posture is different (potentially publicly accessible with moderation).\n\n**Access Modeling:**\n*   Private Data: UserProfile, CreditCard, Transaction, SpendingGoal, PaymentReminder, and Balance are all owned by a specific user, using path-based ownership.\n*   Collaborative Data: Not explicitly present in this design, but the Membership Map pattern (`members: {uid1: \"\n  }
}
    