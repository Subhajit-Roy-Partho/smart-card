/**
 * @fileoverview Firestore Security Rules for Smart Spend application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private data nested under `/users/{userId}`,
 * while allowing public read access to global data like credit card definitions and suggested cards.
 * The rules leverage path-based authorization, ensuring that users can only access data that belongs to them,
 * and avoiding costly `get()` calls by relying on the document path to determine ownership.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /credit_cards/{creditCardId}: Stores global credit card definitions, publicly readable.
 * - /users/{userId}/credit_cards/{creditCardId}/...: Stores user-specific data related to a credit card, accessible only to the user.
 * - /categories/{categoryId}: Stores expense category information, publicly readable.
 * - /suggested_cards/{suggestedCardId}: Stores credit cards suggested by users, publicly readable.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Global credit card and category data is publicly readable to facilitate easy selection.
 * - The SuggestedCard collection is publicly readable to allow community contributions.
 * - All write operations on user-owned data require the user to be authenticated and the owner of the data.
 * - No complex data validation is performed in this prototyping phase, focusing on authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get) - User with UID 'user123' can read their profile.
     * @allow (update) - User with UID 'user123' can update their profile.
     * @allow (delete) - User with UID 'user123' can delete their profile.
     * @deny (create) - User with UID 'user456' cannot create a profile for user 'user123'.
     * @deny (get) - User with UID 'user456' cannot read the profile of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read global credit card data, but prohibits modifications.
     * @path /credit_cards/{creditCardId}
     * @allow (get) - Any user can read credit card data.
     * @allow (list) - Any user can list credit card data.
     * @deny (create) - No one can create credit card data.
     * @deny (update) - No one can update credit card data.
     * @deny (delete) - No one can delete credit card data.
     * @principle Allows public read access to global credit card information.
     */
    match /credit_cards/{creditCardId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to manage their own transaction data for a specific credit card.
     * @path /users/{userId}/credit_cards/{creditCardId}/transactions/{transactionId}
     * @allow (create) - User with UID 'user123' can create a transaction for their credit card.
     * @allow (get) - User with UID 'user123' can read a transaction for their credit card.
     * @allow (update) - User with UID 'user123' can update a transaction for their credit card.
     * @allow (delete) - User with UID 'user123' can delete a transaction for their credit card.
     * @deny (create) - User with UID 'user456' cannot create a transaction for user 'user123'.
     * @deny (get) - User with UID 'user456' cannot read the transaction of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/credit_cards/{creditCardId}/transactions/{transactionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read global category data, but prohibits modifications.
     * @path /categories/{categoryId}
     * @allow (get) - Any user can read category data.
     * @allow (list) - Any user can list category data.
     * @deny (create) - No one can create category data.
     * @deny (update) - No one can update category data.
     * @deny (delete) - No one can delete category data.
     * @principle Allows public read access to global category information.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to manage their own spending goal data for a specific credit card.
     * @path /users/{userId}/credit_cards/{creditCardId}/spending_goals/{spendingGoalId}
     * @allow (create) - User with UID 'user123' can create a spending goal for their credit card.
     * @allow (get) - User with UID 'user123' can read a spending goal for their credit card.
     * @allow (update) - User with UID 'user123' can update a spending goal for their credit card.
     * @allow (delete) - User with UID 'user123' can delete a spending goal for their credit card.
     * @deny (create) - User with UID 'user456' cannot create a spending goal for user 'user123'.
     * @deny (get) - User with UID 'user456' cannot read the spending goal of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/credit_cards/{creditCardId}/spending_goals/{spendingGoalId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows a user to manage their own payment reminder data for a specific credit card.
     * @path /users/{userId}/credit_cards/{creditCardId}/payment_reminders/{paymentReminderId}
     * @allow (create) - User with UID 'user123' can create a payment reminder for their credit card.
     * @allow (get) - User with UID 'user123' can read a payment reminder for their credit card.
     * @allow (update) - User with UID 'user123' can update a payment reminder for their credit card.
     * @allow (delete) - User with UID 'user123' can delete a payment reminder for their credit card.
     * @deny (create) - User with UID 'user456' cannot create a payment reminder for user 'user123'.
     * @deny (get) - User with UID 'user456' cannot read the payment reminder of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/credit_cards/{creditCardId}/payment_reminders/{paymentReminderId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read suggested card data, but enforces authentication for creation and requires the userId to match the auth UID.
     * @path /suggested_cards/{suggestedCardId}
     * @allow (get) - Any user can read suggested card data.
     * @allow (list) - Any user can list suggested card data.
     * @allow (create) - A user can create a suggested card if authenticated and userId matches auth.uid.
     * @deny (update) - No one can update suggested card data.
     * @deny (delete) - No one can delete suggested card data.
     * @principle Allows public read access to suggested card information, with authenticated, owner-only creation.
     */
    match /suggested_cards/{suggestedCardId} {
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to manage their own balance data for a specific credit card.
     * @path /users/{userId}/credit_cards/{creditCardId}/balances/{balanceId}
     * @allow (create) - User with UID 'user123' can create a balance for their credit card.
     * @allow (get) - User with UID 'user123' can read a balance for their credit card.
     * @allow (update) - User with UID 'user123' can update a balance for their credit card.
     * @allow (delete) - User with UID 'user123' can delete a balance for their credit card.
     * @deny (create) - User with UID 'user456' cannot create a balance for user 'user123'.
     * @deny (get) - User with UID 'user456' cannot read the balance of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/credit_cards/{creditCardId}/balances/{balanceId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}