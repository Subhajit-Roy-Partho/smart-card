rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Manages user profile data, ensuring only the user can read and write their own profile.
     * @path: /users/{userId}
     * @allow: (create, update, delete) User with UID 'user123' can modify /users/user123.
     * @deny: (create, update, delete) User with UID 'user456' cannot modify /users/user123.
     * @principle: Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description: Manages global credit card data, allowing anyone to read but nobody to create/update/delete.
     * @path: /credit_cards/{creditCardId}
     * @allow: (get, list) Any user can read credit card data.
     * @deny: (create, update, delete) No one can create, update, or delete credit card data.
     * @principle: Allows public read access but restricts all write access.
     */
    match /credit_cards/{creditCardId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description: Manages transaction data for a specific credit card, ensuring only the owner can manage their transactions.
     * @path: /users/{userId}/credit_cards/{creditCardId}/transactions/{transactionId}
     * @allow: (create, update, delete) User with UID 'user123' can modify /users/user123/credit_cards/card456/transactions/txn789.
     * @deny: (create, update, delete) User with UID 'user456' cannot modify /users/user123/credit_cards/card456/transactions/txn789.
     * @principle: Enforces document ownership for writes.
     */
    match /users/{userId}/credit_cards/{creditCardId}/transactions/{transactionId} {
        function isSignedIn() {
          return request.auth != null;
        }
        function isOwner(userId) {
          return request.auth.uid == userId;
        }
        function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
        }

        allow get: if isSignedIn() && isOwner(userId);
        allow list: if false;
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId);
        allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description: Manages category data, allowing anyone to read but nobody to create/update/delete.
     * @path: /categories/{categoryId}
     * @allow: (get, list) Any user can read category data.
     * @deny: (create, update, delete) No one can create, update, or delete category data.
     * @principle: Allows public read access but restricts all write access.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description: Manages spending goal data for a specific credit card, ensuring only the owner can manage their spending goals.
     * @path: /users/{userId}/credit_cards/{creditCardId}/spending_goals/{spendingGoalId}
     * @allow: (create, update, delete) User with UID 'user123' can modify /users/user123/credit_cards/card456/spending_goals/goal789.
     * @deny: (create, update, delete) User with UID 'user456' cannot modify /users/user123/credit_cards/card456/spending_goals/goal789.
     * @principle: Enforces document ownership for writes.
     */
    match /users/{userId}/credit_cards/{creditCardId}/spending_goals/{spendingGoalId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
        }

      allow get: if isSignedIn() && isOwner(userId);
        allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description: Manages payment reminder data for a specific credit card, ensuring only the owner can manage their payment reminders.
     * @path: /users/{userId}/credit_cards/{creditCardId}/payment_reminders/{paymentReminderId}
     * @allow: (create, update, delete) User with UID 'user123' can modify /users/user123/credit_cards/card456/payment_reminders/reminder789.
     * @deny: (create, update, delete) User with UID 'user456' cannot modify /users/user123/credit_cards/card456/payment_reminders/reminder789.
     * @principle: Enforces document ownership for writes.
     */
    match /users/{userId}/credit_cards/{creditCardId}/payment_reminders/{paymentReminderId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
        }

      allow get: if isSignedIn() && isOwner(userId);
        allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description: Manages suggested card data, allowing anyone to read but only authenticated users to create. Update/Delete are disallowed.
     * @path: /suggested_cards/{suggestedCardId}
     * @allow: (get, list) Any user can read suggested card data.
     * @allow: (create) Only signed-in users can create.
     * @deny: (update, delete) No one can update or delete suggested card data.
     * @principle: Allows public read access and authenticated-user create access, restricts update/delete.
     */
    match /suggested_cards/{suggestedCardId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description: Manages balance data for a specific credit card, ensuring only the owner can manage their balances.
     * @path: /users/{userId}/credit_cards/{creditCardId}/balances/{balanceId}
     * @allow: (create, update, delete) User with UID 'user123' can modify /users/user123/credit_cards/card456/balances/balance789.
     * @deny: (create, update, delete) User with UID 'user456' cannot modify /users/user123/credit_cards/card456/balances/balance789.
     * @principle: Enforces document ownership for writes.
     */
    match /users/{userId}/credit_cards/{creditCardId}/balances/{balanceId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
        }

      allow get: if isSignedIn() && isOwner(userId);
        allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
    /**
     * @description: Allows the owner of a user to list their credit cards.
     * @path: /users/{userId}/credit_cards/{creditCardId}
     * @allow: (list) User with UID 'user123' can list /users/user123/credit_cards
     * @deny: (list) User with UID 'user456' cannot list /users/user123/credit_cards
     * @principle: List operation secured by path.
     */
      match /users/{userId}/credit_cards/{creditCardId} {
        function isSignedIn() {
          return request.auth != null;
        }
        function isOwner(userId) {
          return request.auth.uid == userId;
        }
        function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
        }
      allow get: if isSignedIn() && isOwner(userId);
        allow list: if false;
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId);
        allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}